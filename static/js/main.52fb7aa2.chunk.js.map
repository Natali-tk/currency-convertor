{"version":3,"sources":["components/NavBar.tsx","components/CurrencyRow.tsx","components/api/currency-api.ts","pages/ConvertorPage.tsx","components/Table/TableHeader.tsx","components/Table/TableRow.tsx","components/Table/Table.tsx","components/Selector.tsx","pages/ExchangeRatePage.tsx","App.tsx","index.tsx"],"names":["Navbar","className","to","CurrencyRow","currencyOptions","selectedCurrency","amount","onChangeCurrency","onChangeAmount","type","pattern","value","Number","toFixed","onChange","map","option","key","shortid","generate","getCurrencyRates","a","axios","get","result","data","console","error","defaults","baseURL","ConvertorPage","fromAmount","toAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","setAmount","amountInFromCurrency","setAmountInFromCurrency","exchangeRate","setExchangeRate","undefined","useEffect","then","currencyArr","item","cc","prevState","from","find","rate","findExchRate","event","target","TableHeader","TableRow","currency","base","txt","Table","currencies","baseCurrency","findObj","Selector","handleChangeSelect","ExchangeRatePage","setCurrency","setReqStatus","setBaseCurrency","setCurrencies","curArr","onFetchCurrency","length","App","fallback","component","path","exact","render","document","querySelector"],"mappings":"+PAGaA,EAAmB,kBAC9B,6BACE,yBAAKC,UAAU,yBACb,wBAAIA,UAAU,4BACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAASC,GAAG,KAAZ,2DAEF,wBAAID,UAAU,YACZ,kBAAC,IAAD,CAASC,GAAG,UAAZ,sE,+BCPGC,EAAoC,SAAC,GAM3C,IALLC,EAKI,EALJA,gBACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,eAEA,OACE,yBAAKP,UAAU,iBACb,2BACEQ,KAAK,SACLC,QAAQ,uBACRT,UAAU,eACVU,MAAkB,IAAXL,EAAe,GAAKM,OAAON,EAAOO,QAAQ,IACjDC,SAAUN,IAEZ,4BACEP,UAAU,kBACVU,MAAON,EACPS,SAAUP,GAETH,EAAgBW,KAAI,SAAAC,GAAM,OACzB,4BAAQC,IAAKC,IAAQC,WAAYR,MAAOK,GACrCA,S,0CCvBE,SAAeI,IAA9B,+B,4CAAe,4BAAAC,EAAA,+EAEUC,IAAMC,IACzB,kDAHS,cAELC,EAFK,yBAKJA,EAAOC,MALH,gCAOXC,QAAQC,MAAM,UAAd,MAPW,0D,sBAFfL,IAAMM,SAASC,QAAU,sBCGlB,IAAMC,EAA0B,WAAO,IAQxCC,EAAoBC,EARmB,EACGC,mBAAS,CAAC,QADb,mBACpC7B,EADoC,KACnB8B,EADmB,OAEHD,mBAAS,OAFN,mBAEpCE,EAFoC,KAEtBC,EAFsB,OAGPH,mBAAS,OAHF,mBAGpCI,EAHoC,KAGxBC,EAHwB,OAIfL,mBAAS,GAJM,mBAIpC3B,EAJoC,KAI5BiC,EAJ4B,OAKaN,oBAAS,GALtB,mBAKpCO,EALoC,KAKdC,EALc,OAMHR,qBANG,mBAMpCS,EANoC,KAMtBC,EANsB,KA8D3C,OArDIH,QAAyCI,IAAjBF,GAC1BX,EAAazB,EACb0B,EAAW1B,EAASoC,IAEpBV,EAAW1B,EACXyB,EAAazB,EAASoC,GAGxBG,qBAAU,WACRzB,IAAmB0B,MAAK,SAAArB,GACtB,IAAMsB,EAActB,EAAKV,KAAI,SAACiC,GAAD,OAAqBA,EAAKC,MACvDf,GAAmB,SAAAgB,GAAS,4BAAQA,GAAR,YAAsBH,OA4BlDJ,EA3BqB,SAACQ,EAAcjD,GAClC,GAAoB,MAAhBiC,GAAsC,MAAdE,EAAoB,CAC9C,IAAIK,EACJ,GAAIS,IAASjD,EACXwC,EAAe,OACV,GAAa,QAATS,EAAgB,CAIzBT,EAAe,EAHOjB,EAAK2B,MACzB,SAACJ,GAAD,OAAqBA,EAAKC,KAAO/C,KACjCmD,UAEG,GAAW,QAAPnD,EAAc,CAIvBwC,EAHsBjB,EAAK2B,MACzB,SAACJ,GAAD,OAAqBA,EAAKC,KAAOE,KACjCE,KAC6B,OAC1B,QAAaT,IAATnB,GAAsB0B,GAAQjD,EAAI,CAO3CwC,EANsBjB,EAAK2B,MACzB,SAACJ,GAAD,OAAqBA,EAAKC,KAAOE,KACjCE,KACoB5B,EAAK2B,MACzB,SAACJ,GAAD,OAAqBA,EAAKC,KAAO/C,KACjCmD,KAGJ,OAAOX,GAGKY,CAAanB,EAAcE,SAE5C,CAACF,EAAcE,IAahB,oCACE,sFACA,yBAAKpC,UAAU,WACb,kBAAC,EAAD,CACEG,gBAAiBA,EACjBC,iBAAkB8B,EAClB5B,iBAAkB,SAACgD,GAAD,OAChBnB,EAAgBmB,EAAMC,OAAO7C,QAE/BH,eApBR,SAAgC+C,GAC9BhB,EAAU3B,OAAO2C,EAAMC,OAAO7C,QAC9B8B,GAAwB,IAmBlBnC,OAAQyB,IAEV,0BAAM9B,UAAU,SAAhB,KACA,kBAAC,EAAD,CACEG,gBAAiBA,EACjBC,iBAAkBgC,EAClB9B,iBAAkB,SAACgD,GAAD,OAChBjB,EAAciB,EAAMC,OAAO7C,QAE7BH,eAzBR,SAA8B+C,GAC5BhB,EAAU3B,OAAO2C,EAAMC,OAAO7C,QAC9B8B,GAAwB,IAwBlBnC,OAAQ0B,OCtFLyB,EAAc,WACzB,OACE,+BACE,4BACE,uFACA,mGACA,8HCCKC,EAA6B,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KACrD,OACE,2BAAO3D,UAAU,aAAagB,IAAKC,IAAQC,YACzC,4BACE,4BAAKwC,EAASV,IACd,4BAAKU,EAASE,KACd,6BAAMF,EAASN,KAAOO,GAAM/C,QAAQ,OCJ/BiD,EAA0B,SAAC,GAAkC,IACpEF,EADoCG,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAE9CC,EAAUF,EAAWX,MAAK,SAAAO,GAAQ,OAAIA,EAASV,KAAOe,KAO5D,MANqB,QAAjBA,EACFJ,EAAO,EACEK,IACTL,EAAOK,EAAQZ,MAGVU,EACL,2BAAO9D,UAAU,+BACf,kBAAC,EAAD,MADF,OAEG8D,QAFH,IAEGA,OAFH,EAEGA,EAAYhD,KAAI,SAAC4C,GAAD,OACf,kBAAC,EAAD,CAAUA,SAAUA,EAAUC,KAAMA,EAAM3C,IAAKC,IAAQC,iBAI3D,4CCnBS+C,EAA6B,SAAC,GAIpC,IAHLP,EAGI,EAHJA,SACAK,EAEI,EAFJA,aACAG,EACI,EADJA,mBAEA,OACE,yBAAKlE,UAAU,cACb,4BACEA,UAAU,kBACVU,MAAOqD,EACPlD,SAAUqD,GAETR,EAAS5C,KAAI,SAAAC,GAAM,OAClB,4BAAQC,IAAKC,IAAQC,WAAYR,MAAOK,GACrCA,SCjBAoD,EAA6B,WAAO,IAAD,EACdnC,mBAAmB,CAAC,QADN,mBACvC0B,EADuC,KAC7BU,EAD6B,OAEZpC,mBAAS,QAFG,mBAE5BqC,GAF4B,aAGNrC,mBAAS,OAHH,mBAGvC+B,EAHuC,KAGzBO,EAHyB,OAIVtC,mBAAgB,IAJN,mBAIvC8B,EAJuC,KAI3BS,EAJ2B,KAM9C3B,qBAAU,WAAM,4CACd,sBAAAxB,EAAA,sDACE,IACEiD,EAAa,WACblD,IAAmB0B,MAAK,SAAArB,GACtB,IAAMgD,EAAShD,EAAKV,KAAI,SAACiC,GAAD,OAAqBA,EAAKC,MAClDoB,GAAY,SAAAnB,GAAS,4BAAQA,GAAR,YAAsBuB,OAC3CD,EAAc/C,MAEhB6C,EAAa,WACb,MAAO3C,GACP2C,EAAa,YAVjB,4CADc,uBAAC,WAAD,wBAcdI,KACC,IAKH,OACE,oCACE,6FACA,kBAAC,EAAD,CACEf,SAAUA,EACVK,aAAcA,EACdG,mBATqB,SAACZ,GAAD,OACzBgB,EAAgBhB,EAAMC,OAAO7C,UAU1BoD,EAAWY,OAAS,GACnB,kBAAC,EAAD,CAAOZ,WAAYA,EAAYC,aAAcA,MClBtCY,EAjBO,WACpB,OACE,oCACE,kBAAC,EAAD,MACA,yBAAK3E,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAU4E,SAAU,0CAClB,kBAAC,IAAD,CAAOC,UAAWhD,EAAeiD,KAAK,IAAIC,OAAK,IAC/C,kBAAC,IAAD,CAAOF,UAAWV,EAAkBW,KAAK,WACzC,kBAAC,IAAD,CAAU7E,GAAG,W,YCRzB+E,iBACE,gBAAC,IAAD,KACE,gBAAC,EAAD,OAEFC,SAASC,cAAc,Y","file":"static/js/main.52fb7aa2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const Navbar: React.FC = () => (\r\n  <nav>\r\n    <div className=\"nav-wrapper  teal px1\">\r\n      <ul className=\"left hide-on-med-and-dow\">\r\n        <li className=\"nav-link\">\r\n          <NavLink to=\"/\">Конвертер</NavLink>\r\n        </li>\r\n        <li className=\"nav-link\">\r\n          <NavLink to=\"/about\">Курс обміну</NavLink>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n);\r\n","import React from 'react';\r\nimport { ICurrProps } from '../interfaces/ICurrProps';\r\nimport shortid from 'shortid';\r\n\r\nexport const CurrencyRow: React.FC<ICurrProps> = ({\r\n  currencyOptions,\r\n  selectedCurrency,\r\n  amount,\r\n  onChangeCurrency,\r\n  onChangeAmount,\r\n}) => {\r\n  return (\r\n    <div className=\"convertor-box\">\r\n      <input\r\n        type=\"number\"\r\n        pattern=\"^\\d+(\\.|\\,)\\d{2}\"\r\n        className=\"input-amount\"\r\n        value={amount === 0 ? '' : Number(amount.toFixed(2))}\r\n        onChange={onChangeAmount}\r\n      />\r\n      <select\r\n        className=\"select-box__cur\"\r\n        value={selectedCurrency}\r\n        onChange={onChangeCurrency}\r\n      >\r\n        {currencyOptions.map(option => (\r\n          <option key={shortid.generate()} value={option}>\r\n            {option}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://bank.gov.ua';\r\n\r\nexport default async function getCurrencyRates() {\r\n  try {\r\n    const result = await axios.get(\r\n      '/NBUStatService/v1/statdirectory/exchange?json',\r\n    );\r\n    return result.data;\r\n  } catch (error) {\r\n    console.error('Error: ', error);\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CurrencyRow } from '../components/CurrencyRow';\r\nimport getCurrencyRates from '../components/api/currency-api';\r\nimport { ICurrency } from '../interfaces/ICurrency';\r\n\r\nexport const ConvertorPage: React.FC = () => {\r\n  const [currencyOptions, setCurrencyOptions] = useState(['UAH']);\r\n  const [fromCurrency, setFromCurrency] = useState('UAH');\r\n  const [toCurrency, setToCurrency] = useState('USD');\r\n  const [amount, setAmount] = useState(1);\r\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true);\r\n  const [exchangeRate, setExchangeRate] = useState<any>();\r\n\r\n  let fromAmount: number, toAmount: number;\r\n  if (amountInFromCurrency && exchangeRate !== undefined) {\r\n    fromAmount = amount;\r\n    toAmount = amount * exchangeRate;\r\n  } else {\r\n    toAmount = amount;\r\n    fromAmount = amount / exchangeRate;\r\n  }\r\n\r\n  useEffect(() => {\r\n    getCurrencyRates().then(data => {\r\n      const currencyArr = data.map((item: ICurrency) => item.cc);\r\n      setCurrencyOptions(prevState => [...prevState, ...currencyArr]);\r\n      const findExchRate = (from: string, to: string) => {\r\n        if (fromCurrency != null && toCurrency != null) {\r\n          let exchangeRate;\r\n          if (from === to) {\r\n            exchangeRate = 1;\r\n          } else if (from === 'UAH') {\r\n            const exchangeRate2 = data.find(\r\n              (item: ICurrency) => item.cc === to,\r\n            ).rate;\r\n            exchangeRate = 1 / exchangeRate2;\r\n          } else if (to === 'UAH') {\r\n            const exchangeRate1 = data.find(\r\n              (item: ICurrency) => item.cc === from,\r\n            ).rate;\r\n            exchangeRate = exchangeRate1 / 1;\r\n          } else if (data !== undefined && from && to) {\r\n            const exchangeRate1 = data.find(\r\n              (item: ICurrency) => item.cc === from,\r\n            ).rate;\r\n            const exchangeRate2 = data.find(\r\n              (item: ICurrency) => item.cc === to,\r\n            ).rate;\r\n            exchangeRate = exchangeRate1 / exchangeRate2;\r\n          }\r\n          return exchangeRate;\r\n        }\r\n      };\r\n      setExchangeRate(findExchRate(fromCurrency, toCurrency));\r\n    });\r\n  }, [fromCurrency, toCurrency]);\r\n\r\n  function handleFromAmountChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    setAmount(Number(event.target.value));\r\n    setAmountInFromCurrency(true);\r\n  }\r\n\r\n  function handleToAmountChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n    setAmount(Number(event.target.value));\r\n    setAmountInFromCurrency(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Конвертер</h1>\r\n      <div className=\"convert\">\r\n        <CurrencyRow\r\n          currencyOptions={currencyOptions}\r\n          selectedCurrency={fromCurrency}\r\n          onChangeCurrency={(event: React.ChangeEvent<HTMLSelectElement>) =>\r\n            setFromCurrency(event.target.value)\r\n          }\r\n          onChangeAmount={handleFromAmountChange}\r\n          amount={fromAmount}\r\n        />\r\n        <span className=\"equal\">=</span>\r\n        <CurrencyRow\r\n          currencyOptions={currencyOptions}\r\n          selectedCurrency={toCurrency}\r\n          onChangeCurrency={(event: React.ChangeEvent<HTMLSelectElement>) =>\r\n            setToCurrency(event.target.value)\r\n          }\r\n          onChangeAmount={handleToAmountChange}\r\n          amount={toAmount}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport const TableHeader = () => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <th>Код валюти</th>\r\n        <th>Назва валюти</th>\r\n        <th>Курс конвертації</th>\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport shortid from 'shortid';\r\nimport { ICurrency } from '../../interfaces/ICurrency';\r\n\r\ninterface IProps {\r\n  currency: ICurrency;\r\n  base: number;\r\n}\r\n\r\nexport const TableRow: React.FC<IProps> = ({ currency, base }) => {\r\n  return (\r\n    <tbody className=\"table__row\" key={shortid.generate()}>\r\n      <tr>\r\n        <td>{currency.cc}</td>\r\n        <td>{currency.txt}</td>\r\n        <td>{(currency.rate / base).toFixed(2)}</td>\r\n      </tr>\r\n    </tbody>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport shortid from 'shortid';\r\nimport { TableHeader } from './TableHeader';\r\nimport { TableRow } from './TableRow';\r\nimport { ICurrency } from '../../interfaces/ICurrency';\r\n\r\ninterface IProps {\r\n  currencies: ICurrency[];\r\n  baseCurrency: string;\r\n}\r\n\r\nexport const Table: React.FC<IProps> = ({ currencies, baseCurrency }) => {\r\n  let base: number;\r\n  const findObj = currencies.find(currency => currency.cc === baseCurrency);\r\n  if (baseCurrency === 'UAH') {\r\n    base = 1;\r\n  } else if (findObj) {\r\n    base = findObj.rate;\r\n  }\r\n\r\n  return currencies ? (\r\n    <table className=\"centered bordered highlight\">\r\n      <TableHeader />\r\n      {currencies?.map((currency: ICurrency) => (\r\n        <TableRow currency={currency} base={base} key={shortid.generate()} />\r\n      ))}\r\n    </table>\r\n  ) : (\r\n    <div>loading...</div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport shortid from 'shortid';\r\n\r\ninterface IProps {\r\n  currency: string[];\r\n  baseCurrency: string;\r\n  handleChangeSelect: (event: React.ChangeEvent<HTMLSelectElement>) => void;\r\n}\r\n\r\nexport const Selector: React.FC<IProps> = ({\r\n  currency,\r\n  baseCurrency,\r\n  handleChangeSelect,\r\n}) => {\r\n  return (\r\n    <div className=\"select-box\">\r\n      <select\r\n        className=\"select-box__cur\"\r\n        value={baseCurrency}\r\n        onChange={handleChangeSelect}\r\n      >\r\n        {currency.map(option => (\r\n          <option key={shortid.generate()} value={option}>\r\n            {option}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport getCurrencyRates from '../components/api/currency-api';\r\nimport { Table } from '../components/Table/Table';\r\nimport { Selector } from '../components/Selector';\r\nimport { ICurrency } from '../interfaces/ICurrency';\r\n\r\nexport const ExchangeRatePage: React.FC = () => {\r\n  const [currency, setCurrency] = useState<string[]>(['UAH']);\r\n  const [reqStatus, setReqStatus] = useState('idle');\r\n  const [baseCurrency, setBaseCurrency] = useState('UAH');\r\n  const [currencies, setCurrencies] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    async function onFetchCurrency() {\r\n      try {\r\n        setReqStatus('pending');\r\n        getCurrencyRates().then(data => {\r\n          const curArr = data.map((item: ICurrency) => item.cc);\r\n          setCurrency(prevState => [...prevState, ...curArr]);\r\n          setCurrencies(data);\r\n        });\r\n        setReqStatus('resolve');\r\n      } catch (error) {\r\n        setReqStatus('rejected');\r\n      }\r\n    }\r\n    onFetchCurrency();\r\n  }, []);\r\n\r\n  const handleChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) =>\r\n    setBaseCurrency(event.target.value);\r\n\r\n  return (\r\n    <>\r\n      <h1>Курс обміну</h1>\r\n      <Selector\r\n        currency={currency}\r\n        baseCurrency={baseCurrency}\r\n        handleChangeSelect={handleChangeSelect}\r\n      />\r\n      {currencies.length > 0 && (\r\n        <Table currencies={currencies} baseCurrency={baseCurrency} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { Suspense } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { Navbar } from './components/NavBar';\nimport { ConvertorPage } from './pages/ConvertorPage';\nimport { ExchangeRatePage } from './pages/ExchangeRatePage';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Navbar />\n      <div className=\"container\">\n        <Switch>\n          <Suspense fallback={<p>Loading...</p>}>\n            <Route component={ConvertorPage} path=\"/\" exact />\n            <Route component={ExchangeRatePage} path=\"/about\" />\n            <Redirect to=\"/\" />\n          </Suspense>\n        </Switch>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import * as React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './App.css';\nimport './index.css';\n\nrender(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}